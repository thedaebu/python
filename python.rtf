{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ## string data type\
	# len()\
	# [range]\
	# .index()\
	# .count()\
	# .format()\
		- numbers in brackets correspond to arguments for .format\
		- first = \'93my\'94\
		- second = \'93dude\'94\
		print(\'93Hello \{0\} \{1\}.\'94.format(first, second))\
## boolean operators\
	# not\
	# and\
	# or\
## comparison operators\
	- same as Ruby ==\
## equality operators\
	# is / is not - preferable\
	# == / !=\
## if statements \
	# ex. \
		if a is true:\
			print(a)\
		elif b is true:\
			print(b)\
		else:\
			print(c)\
## while statements\
	# ex.\
		spam = 0;\
		while spam < 5:\
			spam += 1\
	# break\
	 	- used to break the while loop if a certain condition is met\
	# continue\
		- used to restart the loop when a certain condition is met\
## pass\
	- must be used in place of the absence of code\
	# ex. \
		if True:\
			pass\
## None\
	- the value used to signify the absence of a value\
## functions\
	- order arguments in the same order as parameters\
	- do not specify in the arguments for parameters without default values\
	- do specify in the arguments for parameters with default values\
	- arguments can be specified by using the specified parameter variable name\
	# ex.\
		def printThis(name, copyright = \'93copyright\'94):\
			print(name + copyright)\
		printThis(\'93DB\'94, copyright = \'932021\'94)\
	# lambda function (anonymous functions)\
		# ex. add = lambda (a,b): a + b\
## join\
	- join is used on the separator and the array is the argument\
	# ex. print(\'93,\'94.join(array_of_strings))\
## format\
	- based on arguments	\
		- used in place of interpolating\
		# ex. \'93Hello \{0\} \{1\}.\'94.format(\'93my\'94, \'93dude\'94) => \'93Hello my dude.\'94\
	- for commas for numbers\
		# ex. \'93\{:,\}\'94.join(12345) => \'9312,345\'94\
## input\
	- used for retrieving input from user\
	- save the input to a variable\
	- the argument for input is a string for the user\
	# ex. answer = input(\'93how are you?\'94)\
## list\
	- lists are like arrays\
	# x = []\
	# x = list() - preferable\
## tuple\
	- tuples are immutable lists\
	- tuples are made without using any enclosings\
	# numbers = 1,2,3 => (1,2,3)\
## range\
	# range(full range)\
	# range(start, end)\
	# range(start, end, increment)\
	- range is non-inclusive\
## dictionaries\
	- dictionaries are like hashes\
	# a = \{\'93a\'94: 1, \'93b\'94: 2, \'93c\'94: 3\}\
	# a = dict(a=1, b=2, c=3)\
## sets\
	- set are hashes without values\
	- used to removed duplicates\
	- used to test if an object is included\
	- used for mathematical operators\
	# new_set = \{\'91new\'92, \'91set\}\
	# letters = set(\'93hello\'94) => \{\'93h\'94, \'93e\'94, \'93l\'94, \'93o\'94\}\
\
\
\
\
\
\
\
\
\
\
\
\
\
		}