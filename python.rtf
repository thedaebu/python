{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ## string data type\
	# len()\
	# [range]\
	# .index()\
	# .count()\
	# .format()\
		- numbers in brackets correspond to arguments for .format\
		- first = \'93my\'94\
		- second = \'93dude\'94\
		print(\'93Hello \{0\} \{1\}.\'94.format(first, second))\
## boolean operators\
	# not\
	# and\
	# or\
## comparison operators\
	- same as Ruby ==\
## equality operators\
	# is / is not - preferable\
	# == / !=\
## if statements \
	# ex. \
		if a is true:\
			print(a)\
		elif b is true:\
			print(b)\
		else:\
			print(c)\
## while statements\
	# ex.\
		spam = 0;\
		while spam < 5:\
			spam += 1\
	# break\
	 	- used to break the while loop if a certain condition is met\
	# continue\
		- used to restart the loop when a certain condition is met\
## pass\
	- must be used in place of the absence of code\
	# ex. \
		if True:\
			pass\
## None\
	- the value used to signify the absence of a value\
## functions\
	- order arguments in the same order as parameters\
	- do not specify in the arguments for parameters without default values\
	- do specify in the arguments for parameters with default values\
	- arguments can be specified by using the specified parameter variable name\
	# ex.\
		def printThis(name, copyright = \'93copyright\'94):\
			print(name + copyright)\
		printThis(\'93DB\'94, copyright = \'932021\'94)\
	# lambda function (anonymous functions)\
		# ex. add = lambda (a,b): a + b\
## join\
	- join is used on the separator and the array is the argument\
	# ex. print(\'93,\'94.join(array_of_strings))\
## format\
	- based on arguments	\
		- used in place of interpolating\
		# ex. \'93Hello \{0\} \{1\}.\'94.format(\'93my\'94, \'93dude\'94) => \'93Hello my dude.\'94\
	- for commas for numbers\
		# ex. \'93\{:,\}\'94.join(12345) => \'9312,345\'94\
## input\
	- used for retrieving input from user\
	- save the input to a variable\
	- the argument for input is a string for the user\
	# ex. answer = input(\'93how are you?\'94)\
## built-in data types\
	## list\
		- lists are like arrays\
		# x = []\
		# x = list() - preferable\
		# list comprehension\
			# x = [i for i in sentence if is_consonant(i)]\
	## tuple\
		- tuples are immutable lists\
		- tuples are made without using any enclosures\
		# numbers = (1,2,3)\
		# numbers = 1,2,3\
	## range\
		# range(full range)\
		# range(start, end)\
		# range(start, end, increment)\
		- range is non-inclusive\
	## dictionaries\
		- dictionaries are like hashes\
		# a = \{\'93a\'94: 1, \'93b\'94: 2, \'93c\'94: 3\}\
		# a = dict(a=1, b=2, c=3)\
	## sets\
		- set are hashes without values\
		- used to removed duplicates\
		- used to test if an object is included\
		- used for mathematical operators\
		# new_set = \{\'91new\'92, \'91set\'92\}\
		# letters = set(\'93hello\'94) => \{\'93h\'94, \'93e\'94, \'93l\'94, \'93o\'94\}\
## built-in functions\
	## filter(function, iterable)\
		- creates a new iterable of the same type which includes each item for which function 		  returns true\
	## map(function, iterable)\
		- creates a new iterable of the same type which includes the result of calling the function 		on every item in the iterable\
		# ex. sqs = map(lambda x: x**2, range(2))\
			list(sqs)\
	## sorted(iterable, key=None, reverse=False)\
		- creates a new sorted list from the items in the iterable\
	## enumerate(iterable, start=0)\
		- starts with a sequence and converts it into a series of tuples\
		- each tuple is made up of an index and value\
	## zip(*iterables)\
		- creates a zip object filled with tuples that combine 1-to-1 the items in each provided 		iterable\
## function arguments\
	## *args\
		- used for arguments not part of a variable\
	## **kwargs\
		- keyword arguments\
		- arguments used as key-value pairs\
## importing in Python\
	- module is Python code in a separate file\
	- package is the path to a directory that contains modules\
	- __ini__.py is the default package for a package\
	- submodule is a file in a module\'92s folder\
	# import statements\
		# import <module>\
		# import <package>.<subpackage>.<module>\
		# from <package> import <module>, <module>\
		# from <package> import <function>\
		# from <package> import <module> as <altName>\
## classes\
	- each method needs self as the first argument\
	- use one leading underscore when naming class variables\
	- use __slots__ to set an array of class variables to be used for Python to work faster\
	- use __repr__ to make return of class instance prettier\
	- inheritance\
		- use more general class as argument for more specific class\
		- in __init__ method, use the super().__init__ method\
	- getter method\
		- use @property on the line before the getter method\
	- setter method\
		- use @<variable_name>.setter before the setter method\
	# ex. class Employee:\
		__slots__ = [\'91_id\'92]\
\
		def __init__(self, id):\
			self._id = id\
\
		@property\
		def id(self):\
			return self._id\
	\
		@id.setter\
		def id(self, value):\
			if value > 0\
				value = 0\
			self._id = value\
			return self._id\
		\
		def __repr__(self):\
			return f\'94<Employee (\{self._id\})>\'94\
\
	          class Manager(Employee):\
		def __init__(self, id):\
			super().__init__(id)\
			self.empoyees = []\
	\
\
\
\
\
\
\
\
\
\
\
		}