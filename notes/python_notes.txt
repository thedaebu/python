## access to attributes and methods according to data type
# dir(variableName)
# help(dataType)

## lists
# list.append(item)
# list.extend(list2) - concats
# sorted(list) and list.sort(key=)
# list(dataType) - dictionary.items(), set, tuple, generator
# (string).join(list)
# list.split(string)

## dictionaries
# dictionary.keys()
# dictionary.values()

## sets
# set.add(item)
# set.remove(item)
# set(dataType) - list, tuple

## tuple
# tuple(dataType) - list, set

## generator
# yield/next()

## loops
# for
	# range()
	# enumerate(list) = index, item
	# dictionary.items() = key, value
	# zip(list1, list2) = (item1, item2)

## comprehension
# list
	# [item for item in list if conditional]
# dictionary
	# {key: value for key, value in zip(keys, values)}
# set
	# {item for item in list}
# generator
	# (item for item in list)

## methods for multiple data types
# str(int)/int(str)
# sorted(dataType) - list, dictionary
# .index(dataType) - string, list, tuple
# .pop(dateType) - list, dictionary
# item in dataType - list, tuple, dictionary, set

## None
- the value used to signify the absence of a value

## function arguments
- used when unsure of input arguments
# *args
	- used for non-dictionary type arguments
# **kwargs
	- used for dictionary type arguments
# def something(*args, **kwargs):
# something(*args, **kwargs)/something(arg1, arg2, key1=value1, key2=value2)

## modules
# from operator import attrgetter
	# attrgetter('attrName')
	- obtains value of class object according to attribute name

## importing in Python
- module is Python code in a separate file
- package is a directory that contains modules
- subpackage is nested package
- __ini__.py is the default package for a package
# import statements
	# import module/module as newName
	# from module import modulePart/modulePart as newModulePartName
	# import package.subpackage.module
	# from package import module, module
	# from package import function
	# from package import module as newName
# path
	# import os
	  cur_path = os.path.dirname(__file__)
	  new_path = os.path.relpath('<file with relative path to file>', cur_path)
	#

## duck typing and EAFP
- duck typing is the concept that the type of an object is irrelevant and only
  the attributes of the object matter
- EAFP is using try/except blocks instead of if/else blocks