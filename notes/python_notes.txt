## pass
	- must be used in place of the absence of code
	# ex. 
		if True:
			pass
## None
	- the value used to signify the absence of a value
## format
	- based on arguments	
		- used in place of interpolating
		# ex. 'Hello {0} {1}.'.format('my', 'dude') => 'Hello my dude.'
	- for commas for numbers
		# ex. '{:,}'.join(12345) => '12,345'
## built-in functions
	## filter(function, iterable)
		- creates a new iterable of the same type which includes each item for which function 		  returns true
	## map(function, iterable)
		- creates a new iterable of the same type which includes the result of calling the function 		on every item in the iterable
		# ex. sqs = map(lambda x: x**2, range(2))
			list(sqs)
	## sorted(iterable, key=None, reverse=False)
		- creates a new sorted list from the items in the iterable
	## enumerate(iterable, start=0)
		- starts with a sequence and converts it into a series of tuples
		- each tuple is made up of an index and value
	## zip(*iterables)
		- creates a zip object filled with tuples that combine 1-to-1 the items in each provided 		iterable
## function arguments
	## *args
		- used for arguments not part of a variable
	## **kwargs
		- keyword arguments
		- arguments used as key-value pairs
## importing in Python
	- module is Python code in a separate file
	- package is the path to a directory that contains modules
	- __ini__.py is the default package for a package
	- submodule is a file in a module's folder
	# import statements
		# import <module>
		# import <package>.<subpackage>.<module>
		# from <package> import <module>, <module>
		# from <package> import <function>
		# from <package> import <module> as <altName>
## classes
	- each method needs self as the first argument
	- use one leading underscore when naming class variables
	- use __slots__ to set an array of class variables to be used for Python to work faster
	- use __repr__ to make return of class instance prettier
	- inheritance
		- use more general class as argument for more specific class
		- in __init__ method, use the super().__init__ method
	- getter method
		- use @property on the line before the getter method
	- setter method
		- use @<variable_name>.setter before the setter method
	# ex. class Employee:
		__slots__ = ['_id']

		def __init__(self, id):
			self._id = id

		@property
		def id(self):
			return self._id
	
		@id.setter
		def id(self, value):
			if value > 0
				value = 0
			self._id = value
			return self._id
		
		def __repr__(self):
			return f'<Employee ({self._id})>'

	    class Manager(Employee):
		def __init__(self, id):
			super().__init__(id)
			self.empoyees = []
		}